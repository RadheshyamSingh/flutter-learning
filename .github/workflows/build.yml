name: Build Automation

on:
  push:
    branches:
      - main

jobs:
#  analyze_and_test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#          flutter-version: '3.22.1'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Code formatter
#        run: dart format --output=none --set-exit-if-changed .
#
#      - name: Run Dart analyzer
#        run: flutter analyze --fatal-warnings
#
#      - name: Run tests
#        run: flutter test

  build_android_apk:
    name: Build Flutter (Android)
    runs-on: ubuntu-latest
    #needs: analyze_and_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.22.1'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Install Gradle
#        uses: eskatos/gradle-command-action@v2
#        with:
#          gradle-version: 7.6.3  # Replace with the desired Gradle version
#
#      - name: Generate Gradle Wrapper
#        run: gradle wrapper --gradle-version 7.6.3  # Replace with the desired Gradle version
#
#      - name: Ensure Gradle Wrapper Permissions
#        run: chmod +x gradlew

#      - name: Build APK
#        run: flutter build apk --release --split-per-abi

      - name: Build Signed APK
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > /tmp/keystore.jks
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease -PkeyAlias=$KEY_ALIAS -PkeyPassword=$KEY_PASSWORD -PstorePassword=$KEYSTORE_PASSWORD -PstoreFile=/tmp/keystore.jks


      - name: Upload Android APKs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apks
          path: build/app/outputs/flutter-apk/app-*.apk

#  build_ios:
#    name: Build Flutter (iOS)
#    runs-on: macos-latest
#    needs: analyze_and_test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#          flutter-version: '3.22.1'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Generate Podfile
#        run: |
#          cd ios
#          flutter build ios --no-codesign || echo "No Podfile created"
#          ls -la
#          test -f Podfile || (echo "Creating Podfile" && flutter create . && flutter build ios --no-codesign)
#          ls -la
#
#      - name: Install CocoaPods dependencies
#        run: |
#          cd ios
#          pod install || echo "Failed to install pods"
#
#      - name: Build iOS App
#        run: |
#          flutter build ios --release --no-codesign
#          cd build/ios/iphoneos
#          mkdir Payload
#          cd Payload
#          ln -s ../Runner.app
#          cd ..
#          zip -r app.ipa Payload
#
#      - name: Upload iOS build as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: ios-build
#          path: build/ios/iphoneos/*.ipa

  upload_release:
    runs-on: ubuntu-latest
    needs: build_android_apk

    steps:
      - name: Download Android APKs
        uses: actions/download-artifact@v3
        with:
          name: android-apks
          path: .

#      - name: Download iOS build
#        uses: actions/download-artifact@v3
#        with:
#          name: ios-build
#          path: .

      - name: List APKs
        run: ls -R .

      - name: Upload Android APK and iOS IPA to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: app-*.aab
          tag: v1.0.${{ github.run_number}}
          token: ${{ secrets.TOKEN }}